@model MyPet.Web.ViewModels.About.SiteAboutViewModel
<script src="//maxcdn.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
<!------ Include the above in your HEAD tag ---------->
<link href="~/css/counter.css" rel="stylesheet" />


<link rel="stylesheet" href="path/to/font-awesome/css/font-awesome.min.css">
<link href="~/css/starsRating.css" rel="stylesheet" />
<div class="jumbotron d-flex align-items-center bg-white">
    <div class="container pt-">
        <div class="row">
            <br />



        </div>
        <div class="row text-center">
            <div class="col">
                <div class="counter">
                    <i class="fa fa-user fa-2x"></i>
                    <h2 class="timer count-title count-number" data-to="@Model.UsersCount" data-speed="5000"></h2>
                    <p class="count-text ">Our Customer</p>
                </div>
            </div>
            <div class="col">
                <div class="counter">
                    <i class="fa fa-paw fa-2x"></i>
                    <h2 class="timer count-title count-number" data-to="@Model.PetsCount" data-speed="4000"></h2>
                    <p class="count-text ">Pets</p>
                </div>
            </div>
            <div class="col">
                <div class="counter">
                    <i class="fa fa-camera-retro fa-2x"></i>
                    <h2 class="timer count-title count-number" data-to="@Model.ImagesCount" data-speed="3000"></h2>
                    <p class="count-text ">Photos</p>
                </div>
            </div>
            <div class="col">
                <div class="counter">
                    <i class="fa fa-book fa-2x"></i>
                    <h2 class="timer count-title count-number" data-to="@Model.BreedsCount" data-speed="2500"></h2>
                    <p class="count-text ">Breeds</p>
                </div>
            </div>
        </div>
        <div><hr /></div>



        <blockquote class="container">
            <p class="mb-0">"Pets are humanizing. They remind us we have an obligation and responsibility to preserve and nurture and care for all life."</p>
            <footer class="blockquote-footer">
                James Cromwell
                <cite title="Source Title">American Actor</cite>
            </footer>
        </blockquote>
        <h1 class="text-center">Rate us</h1>
        <div class="rating">
            <input type="radio" name="rating" value="5" id="5"><label for="5">☆</label>
            <input type="radio" name="rating" value="4" id="4"><label for="4">☆</label>
            <input type="radio" name="rating" value="3" id="3"><label for="3">☆</label>
            <input type="radio" name="rating" value="2" id="2"><label for="2">☆</label>
            <input type="radio" name="rating" value="1" id="1"><label for="1">☆</label>
            
        </div>
    </div>
</div>
@section Scripts{
    <script>
        (function ($) {
            $.fn.countTo = function (options) {
                options = options || {};

                return $(this).each(function () {
                    // set options for current element
                    var settings = $.extend({}, $.fn.countTo.defaults, {
                        from: $(this).data('from'),
                        to: $(this).data('to'),
                        speed: $(this).data('speed'),
                        refreshInterval: $(this).data('refresh-interval'),
                        decimals: $(this).data('decimals')
                    }, options);

                    // how many times to update the value, and how much to increment the value on each update
                    var loops = Math.ceil(settings.speed / settings.refreshInterval),
                        increment = (settings.to - settings.from) / loops;

                    // references & variables that will change with each update
                    var self = this,
                        $self = $(this),
                        loopCount = 0,
                        value = settings.from,
                        data = $self.data('countTo') || {};

                    $self.data('countTo', data);

                    // if an existing interval can be found, clear it first
                    if (data.interval) {
                        clearInterval(data.interval);
                    }
                    data.interval = setInterval(updateTimer, settings.refreshInterval);

                    // initialize the element with the starting value
                    render(value);

                    function updateTimer() {
                        value += increment;
                        loopCount++;

                        render(value);

                        if (typeof (settings.onUpdate) == 'function') {
                            settings.onUpdate.call(self, value);
                        }

                        if (loopCount >= loops) {
                            // remove the interval
                            $self.removeData('countTo');
                            clearInterval(data.interval);
                            value = settings.to;

                            if (typeof (settings.onComplete) == 'function') {
                                settings.onComplete.call(self, value);
                            }
                        }
                    }

                    function render(value) {
                        var formattedValue = settings.formatter.call(self, value, settings);
                        $self.html(formattedValue);
                    }
                });
            };

            $.fn.countTo.defaults = {
                from: 0,               // the number the element should start at
                to: 0,                 // the number the element should end at
                speed: 1000,           // how long it should take to count between the target numbers
                refreshInterval: 100,  // how often the element should be updated
                decimals: 0,           // the number of decimal places to show
                formatter: formatter,  // handler for formatting the value before rendering
                onUpdate: null,        // callback method for every time the element is updated
                onComplete: null       // callback method for when the element finishes updating
            };

            function formatter(value, settings) {
                return value.toFixed(settings.decimals);
            }
        }(jQuery));

        jQuery(function ($) {
            // custom formatting example
            $('.count-number').data('countToOptions', {
                formatter: function (value, options) {
                    return value.toFixed(options.decimals).replace(/\B(?=(?:\d{3})+(?!\d))/g, ',');
                }
            });

            // start all the timers
            $('.timer').each(count);

            function count(options) {
                var $this = $(this);
                options = $.extend({}, options || {}, $this.data('countToOptions') || {});
                $this.countTo(options);
            }
        });
    </script>
}

